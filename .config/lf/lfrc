# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set drawbox true
set mouse true
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
	image/gif|video/x-msvideo) setsid -f mpv --terminal=no $fx ;;
	image/*) zsh -c 'setopt nullglob; f=(*.{jpg,jpeg,png,webp,gif,avif,bmp,ico,svg,jxl,JPG,PNG}); i="${f[(I)$1:t]}"; setsid -f nsxiv -afq "${f[@]:$((i-1))}" "${f[@]:0:$((i-1))}"' loona $f ;;
	application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura --mode fullscreen $fx >/dev/null 2>&1 ;;
	*) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	}
}}

cmd moveto ${{
	set -f
	dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | dmenu -l 15 -i -p "Move to where?" | sed "s|~|$HOME|g"); dest=$(eval echo "$dest")
	[ -z "$dest" ] && exit
	safe mv $fx $dest
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	set -f
	dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | dmenu -l 15 -i -p "Copy to where?" | sed "s|~|$HOME|g"); dest=$(eval echo "$dest")
	[ -z "$dest" ] && exit
	safe cp $fx $dest
	notify-send "ðŸ“‹ File(s) copied." "File(s) copied to $dest."
}}

cmd zip ${{
    set -f
    zipname="${1:-new_archive}"
    zip -r "$zipname.zip" $(basename -a $fx)
    lf -remote "send $id unselect"
}}

cmd setbg "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"
    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)
    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"
    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }
    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done
    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

# Bindings
map h cd ~
map g top
map D delete
map E extract
map Z zip
map C copyto
map M moveto
map <c-n> push :mkdir<space>""<left>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"
map A :rename; cmd-end # at the very end
map I :rename; cmd-home # at the very beginning
map i invert-below
map B bulkrename
map b $setbg $f
map f # Intentionally empty so zsh shortcuts apply
map F # Intentionally empty so zsh shortcuts apply
map V push :!nvim<space>
map W $setsid -f $TERMINAL >/dev/null 2>&1
map Y $printf "%s" "$fx" | xclip -selection clipboard
map T $nsxiv -t "$(pwd)" # opens thumbnail mode

# Source Bookmarks
source "~/.config/lf/shortcutrc"
