#!/bin/bash

########## CONFIGURATIONS ##########
# Host on which qBittorrent runs
transmission_host="http://10.0.0.100"
# Port -> the same port that is inside qBittorrent option -> Web UI -> Web User Interface
transmission_port="9091"
# Username to access to Web UI
transmission_username="transmission"
# Password to access to Web UI
transmission_password="transmission"

# If true (lowercase) the script will inject trackers inside private torrent too (not a good idea)
ignore_private=false

# Configure here your trackers list
declare -a live_trackers_list_urls=(
	"https://newtrackon.com/api/stable"
	"https://trackerslist.com/best.txt"
	"https://trackerslist.com/http.txt"
	"https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best.txt"
	)
########## CONFIGURATIONS ##########

jq_executable="$(command -v jq)"
curl_executable="$(command -v curl)"
auto_tor_grab=0
applytheforce=0
all_torrent=0

if [[ -z $jq_executable ]]; then
	echo -e "\n\e[0;91;1mFail on jq. Aborting.\n\e[0m"
	echo "You can find it here: https://stedolan.github.io/jq/"
	echo "Or you can install it with -> sudo apt install jq"
	exit 1
fi

if [[ -z $curl_executable ]]; then
	echo -e "\n\e[0;91;1mFail on curl. Aborting.\n\e[0m"
	echo "You can install it with -> sudo apt install curl"
	exit 2
fi

########## FUNCTIONS ##########
generate_trackers_list () {
	for j in "${live_trackers_list_urls[@]}"; do
		tmp_trackers_list+=$($curl_executable -sS $j)
		tmp_trackers_list+=$'\n'
	done

	trackers_list=$(echo "$tmp_trackers_list" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf("%s%s",$i,FS)}{printf("\n")}' | xargs | tr ' ' '\n')
	if [[ $? -ne 0 ]]; then
		echo "I can't download the list..."
	fi
	number_of_trackers_in_list=$(echo "$trackers_list" | wc -l)
}

inject_trackers () {
	start=1
	while read tracker; do
		if [ -n "$tracker" ]; then
			echo -ne "\e[0;36;1m$start/$number_of_trackers_in_list - Adding tracker $tracker\e[0;36m"
			$curl_executable --silent --fail --show-error --anyauth \
				--user ${transmission_username}:${transmission_password} --header "$qbt_cookie" "${transmission_host}:${transmission_port}/transmission/rpc/" \
				-d "{\"method\":\"torrent-set\",\"arguments\": {\"fields\":[\"ids\",\"trackerAdd\"],\"ids\":[$1],\"trackerAdd\":[\"$tracker\"]}}"

			if [ $? -eq 0 ]; then
				echo -e " -> \e[32mSuccess! "
			else
				echo -e " - \e[31m< Failed > "
			fi
		fi
		start=$((start+1))
	done <<< "$trackers_list"
	echo "Done!"
}

get_torrent_list () {
	get_cookie
	torrent_list=$($curl_executable --silent --anyauth \
		--user ${transmission_username}:${transmission_password} --header "$qbt_cookie" "${transmission_host}:${transmission_port}/transmission/rpc/" \
		-d "{\"method\":\"torrent-get\",\"arguments\": {\"fields\":[\"isPrivate\",\"id\",\"name\",\"hashString\",\"trackers\"]}}")
}

get_cookie () {
	qbt_cookie=$($curl_executable --silent --anyauth \
		--user ${transmission_username}:${transmission_password} ${transmission_host}:${transmission_port}/transmission/rpc/ \
		| sed 's/.*<code>//g;s/<\/code>.*//g')
}

hash_check() {
	case $1 in
		( *[!0-9A-Fa-f]* | "" ) return 1 ;;
		( * )
			case ${#1} in
				( 32 | 40 ) return 0 ;;
				( * )       return 1 ;;
			esac
	esac
}

wait() {
	w=$1
	echo "I'll wait ${w}s to be sure ..."
	while [ $w -gt 0 ]; do
		echo -ne "$w\033[0K\r"
		sleep 1
		w=$((w-1))
	done
}
########## FUNCTIONS ##########

if :; then
	if [[ ! $* =~ ^\-.+ ]]; then
		echo "Arguments must be passed with - in front, like -n foo, or -i 5. Check the instructions"
		echo ""
		$0 -h
		exit
	fi

	[ $# -eq 0 ] && $0 -h

	if [ $# -eq 1 ] && [ $1 == "-f" ]; then
		echo "Don't use only -f, you need to specify also the torrent!"
		exit
	fi

	while getopts ":aflhn:i:" opt; do
		case ${opt} in
			a ) # If used inject trackers to all torrent.
				all_torrent=1
				;;
			f ) # If used force the injection also in private trackers.
				applytheforce=1
				;;
			l ) # Print the list of the torrent where you can inject trackers.
				list=1
				get_torrent_list
				echo -e "\n\e[0;32;1mCurrent torrents:\e[0;32m"

				while IFS= read -r line; do
					torrent_id_array+=("$line")
				done < <(echo $torrent_list | $jq_executable --raw-output '. | .arguments | .torrents | .[] | .id')

				while IFS= read -r line; do
					torrent_name_array+=("$line")
				done < <(echo $torrent_list | $jq_executable --raw-output '. | .arguments | .torrents | .[] | .name')

				for i in "${!torrent_name_array[@]}"; do
					echo "ID: ${torrent_id_array[$i]} ~~~ Name: ${torrent_name_array[$i]}"
				done
				exit
				;;
			n ) # Specify the name of the torrent example -n foo or -n "foo bar", multiple -n can be used.
				tor_arg_names+=("$OPTARG")
				;;
			i ) # Specify the id of the torrent example -i 5, multiple -i can be used.
				tor_arg_id+=("$OPTARG")
				;;
			: )
				echo "Invalid option: -${OPTARG} requires an argument" 1>&2
				exit 0
				;;
			\? )
				echo "Unknow option: -${OPTARG}" 1>&2
				exit 1
				;;
			h | * ) # Display help.
				echo "Usage:"
				echo "$0 -a Inject trackers to all torrent in qBittorrent, this not require any extra information"
				echo "$0 -f Force the injection of the trackers inside the private torrent too, this not require any extra information"
				echo "$0 -l Print the list of the torrent where you can inject trackers, this not require any extra information"
				echo "$0 -n Specify the torrent name or part of it, for example -n foo or -n 'foo bar'"
				echo "$0 -i Specify the torrent id, for example -i 5"
				echo "$0 -h Display this help"
				echo "NOTE:"
				echo "It's possible to specify more than -n and -i in one single command, even combined"
				echo "Just remember that if you set -a in useless to add any extra -n, but -f can always be used"
				exit 2
				;;
		esac
	done
	shift $((OPTIND -1))
fi

for i in "${tor_arg_names[@]}"; do
	if [[ -z "${i// }" ]]; then
		echo "one or more argument for -n not valid, try again"
		exit
	fi
done

if [ ${#tor_arg_names[@]} -eq 0 ] && [ ${#tor_arg_id[@]} -eq 0 ] && [ $all_torrent -eq 0 ] && [ -z $list ] && [ $auto_tor_grab -eq 0 ]; then
	echo "No name, no ID or no -a passed, exiting"
	exit
fi

if [ ${#tor_arg_id[@]} -gt 0 ]; then
	re='^[0-9]+$'

	for i in "${tor_arg_id[@]}"; do
		if ! [[ $i =~ $re ]] ; then
			echo "Error: parameter for -i ${i} is not a number" >&2; exit 1
		fi
	done
fi

	get_torrent_list

	if [ $all_torrent -eq 1 ]; then
		while IFS= read -r line; do
			torrent_id_array+=("$line")
		done < <(echo $torrent_list | $jq_executable --raw-output '. | .arguments | .torrents | .[] | .id')

		while IFS= read -r line; do
			torrent_name_array+=("$line")
		done < <(echo $torrent_list | $jq_executable --raw-output '. | .arguments | .torrents | .[] | .name')

		while IFS= read -r line; do
			torrent_private_array+=("$line")
		done < <(echo $torrent_list | $jq_executable --raw-output '. | .arguments | .torrents | .[] | .isPrivate')

	else
		for i in "${tor_arg_names[@]}"; do
			torrent_name_list=$(echo "$torrent_list" | $jq_executable --raw-output --arg tosearch "$i" '. | .arguments | .torrents | .[] | select(.name|test("\($tosearch)";"i")) .name')

			if [ -n "$torrent_name_list" ]; then # not empty
				torrent_name_check=1
				echo -e "\n\e[0;32;1mFor argument ### -n $i ###\e[0;32m"
				echo -e "\e[0;32;1mI found the following torrent:\e[0;32m"
				echo "$torrent_name_list"
			else
				torrent_name_check=0
			fi

			if [ $torrent_name_check -eq 0 ]; then
				echo -e "\e[0;31;1mI didn't find a torrent with the text: \e[21m$1\e[0m"
				shift
				continue
			else
				while read -r single_found; do
					torrent_name_array+=("$single_found")
					id=$(echo "$torrent_list" | $jq_executable --raw-output --arg tosearch "$single_found" '. | .arguments | .torrents | .[] | select(.name == "\($tosearch)") .id')
					torrent_id_array+=("$id")
					private=$(echo "$torrent_list" | $jq_executable --raw-output --arg tosearch "$single_found" '. | .arguments | .torrents | .[] | select(.name == "\($tosearch)") .isPrivate')
					torrent_private_array+=("$private")
				done <<< "$torrent_name_list"
			fi
		done

		for i in "${tor_arg_id[@]}"; do
			torrent_name_list=$(echo "$torrent_list" | $jq_executable --raw-output --argjson tosearch "$i" '. | .arguments | .torrents | .[] | select(.id == $tosearch) .name')

			if [ -n "$torrent_name_list" ]; then # not empty
				torrent_name_check=1
				echo -e "\n\e[0;32;1mFor argument ### -i $i ###\e[0;32m"
				echo -e "\e[0;32;1mI found the following torrent:\e[0;32m"
				echo "$torrent_name_list"
			else
				torrent_name_check=0
			fi

			if [ $torrent_name_check -eq 0 ]; then
				echo -e "\e[0;31;1mI didn't find a torrent with the text: \e[21m$1\e[0m"
				shift
				continue
			else
				while read -r single_found; do
					torrent_name_array+=("$single_found")
					id=$(echo "$torrent_list" | $jq_executable --raw-output --arg tosearch "$single_found" '. | .arguments | .torrents | .[] | select(.name == "\($tosearch)") .id')
					torrent_id_array+=("$id")
					private=$(echo "$torrent_list" | $jq_executable --raw-output --arg tosearch "$single_found" '. | .arguments | .torrents | .[] | select(.name == "\($tosearch)") .isPrivate')
					torrent_private_array+=("$private")
				done <<< "$torrent_name_list"
			fi
		done
	fi

	if [ ${#torrent_name_array[@]} -gt 0 ]; then
		echo ""
		for i in "${!torrent_name_array[@]}"; do
			echo -ne "\n\e[0;1;4;32mFor the Torrent: \e[0;4;32m"
			echo "${torrent_name_array[$i]}"

			if [[ $ignore_private == true ]] || [ $applytheforce -eq 1 ]; then # Inject anyway the trackers inside any torrent
				if [ $applytheforce -eq 1 ]; then
					echo -e "\e[0m\e[33mForce mode is active, I'll inject trackers anyway\e[0m"
				else
					echo -e "\e[0m\e[33mignore_private set to true, I'll inject trackers anyway\e[0m"
				fi
				[[ -z "$trackers_list" ]] && generate_trackers_list
				inject_trackers ${torrent_id_array[$i]}
			else
				if [[ ${torrent_private_array[$i]} == true ]]; then
					private_tracker_name=$(echo "$torrent_list" | $jq_executable --raw-output --argjson tosearch "${torrent_id_array[$i]}" '. | .arguments | .torrents | .[] | select(.id == $tosearch) .trackers | .[] | .announce' | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/')
					echo -e "\e[31m< Private tracker found \e[0m\e[33m-> $private_tracker_name <- \e[0m\e[31mI'll not add any extra tracker >\e[0m"
				else
					echo -e "\e[0m\e[33mThe torrent is not private, I'll inject trackers on it\e[0m"
					[[ -z "$trackers_list" ]] && generate_trackers_list
					inject_trackers ${torrent_id_array[$i]}
				fi
			fi
		done
	else
		echo "No torrents found, exiting"
	fi
